name: CI
on: [push]
jobs:
  cancel:
    runs-on: [self-hosted]
    name: Cancel Previous Runs
    if: always()
    steps:
      - uses: styfle/cancel-workflow-action@d57d93c3a8110b00c3a2c0b64b8516013c9fd4c9
        if: ${{ github.ref != 'refs/heads/master' }}
        name: cancel old workflows
        id: cancel
        with:
          access_token: ${{ github.token }}
      - if: ${{ github.ref == 'refs/heads/master' }}
        name: Don't cancel old workflows
        id: dont_cancel
        run: |
          echo "Don't cancel old workflow"
  build:
    runs-on: [ self-hosted ]
    needs: [ cancel ]
    continue-on-error: false
    name: Build Image
    steps:
      - name: checkout
        id: checkout
        uses: actions/checkout@v2
      - name: Build and push
        uses: docker/build-push-action@v1
        with:
          registry: c.rzp.io
          username: ${{ secrets.HARBOR_DOCKER_USERNAME }}
          password: ${{ secrets.HARBOR_DOCKER_PASSWORD }}
          repository: ${{ github.repository }}
          build_args: GIT_COMMIT_HASH=${{ github.sha }},GIT_TOKEN=${{ secrets.GIT_TOKEN }}
          push: true
          tags: ${{ github.sha }}
  run_test:
    name: Test Suite
    runs-on: [ self-hosted ]
    needs: [ cancel ]
    continue-on-error: false
    steps:
      - name: checkout
        id: checkout
        uses: actions/checkout@v2
      - name: Running tests
        id: running_test
        uses: docker://razorpay/onggi:php-7.2-nginx
        with:
          entrypoint: /bin/sh
          args: ci-assets/run_unit_tests.sh
        env:
          DB_HOST: db-auth
          DB_PORT: 3306
          DB_USERNAME: root
          DB_PASSWORD: root
          DB_DATABASE: auth
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
          BRANCH: ${{ github.ref }}
      - name: Set Sonarqube Project
        id: set_sonar_project
        run: |
          SONAR_PROJECT="AuthServiceDevCoverageCheck"
          if [ "$BRANCH" == "master" ]; then
          SONAR_PROJECT="AuthService";
          fi
          echo ::set-output name=sonar_project::$SONAR_PROJECT
      - name: Integration Coverage Push to sonar
        uses: sonarsource/sonarcloud-github-action@v1.4
        env:
          SONAR_HOST: ${{ secrets.SONARQUBE_HOST }}
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONARCLOUD_URL: https://sonar.razorpay.com
          SONAR_INTEGRATION_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        with:
          args: >
            -Dsonar.host.url=https://sonar.razorpay.com
            -Dsonar.projectKey=${{ steps.set_sonar_project.outputs.sonar_project }}
            -Dsonar.projectName=${{ steps.set_sonar_project.outputs.sonar_project }}
            -Dsonar.projectVersion=${{ github.sha }}
            -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}
            -Dsonar.projectBaseDir=/github/workspace/app/
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.php.coverage.reportPaths=/github/workspace/clover.xml
            -Dsonar.exclusions=tests/**,vendor,storage/**,ci-assets/**,routes/**
      - name: Find PR Number
        if: github.ref != 'refs/heads/master'
        uses: razorpay/gh-find-current-pr@v1
        id: findPr
      - name: Code Quality Analysis
        if: github.ref != 'refs/heads/master' && success() && steps.findPr.outputs.number
        id: code_quality_analysis
        uses: docker://razorpay/onggi:nginx
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          entrypoint: /bin/bash
          args: ci-assets/quality_analysis.sh
        env:
          SONAR_HOST: ${{ secrets.SONARQUBE_HOST }}
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          GIT_SHA: ${{ github.sha }}
      - name: Add Quality Report Comment
        if: github.ref != 'refs/heads/master' && success() && steps.findPr.outputs.number
        uses: razorpay/create-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          check-only-first-line: true
          unique: true
          number: ${{ steps.findPr.outputs.pr }}
          comment: |
            ${{ steps.code_quality_analysis.outputs.quality_report }}
      - name: Check If PR is hotfix or revert
        if: contains(github.ref, 'hotfix') || contains(github.ref, 'revert')
        id: is_pr_hotfix_or_revert
        run: echo "::set-output name=flag::true"
      - name: TestCoverage OK
        if: steps.is_pr_hotfix_or_revert.outputs.flag != 'true' && steps.code_quality_analysis.outputs.is_test_coverage_ok == 'true'
        run: |
          echo "Test Coverage is OK"
          exit 0
      - name: TestCoverage Less
        if: steps.is_pr_hotfix_or_revert.outputs.flag != 'true' && steps.code_quality_analysis.outputs.is_test_coverage_ok == 'false'
        run: |
          echo "Test Coverage failed. Try adding test cases"
          exit 1
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    services:
      db-auth:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: auth
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
  slack-notify:
    runs-on: [ self-hosted ]
    name: Build Notify
    needs: [ run_test, build ]
    steps:
      - name: Sending build success notification (Slack)
        if: needs.run_test.result == 'success' && needs.build.result == 'success'
        env:
          SLACK_MESSAGE: 'Build success.'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Github Actions # Optional. (defaults to webhook app)
          SLACK_CHANNEL: tech_distelli # Optional. (defaults to webhook)
          SLACK_ICON: https://avatars2.githubusercontent.com/u/2181346?s=200&v=4 # Optional. can be (repository, sender, an URL) (defaults to webhook app avatar)
        uses: rtCamp/action-slack-notify@ca2febb266f78a54a245d815081549c522099b76
      - name: Sending build failed notification (Slack)
        if: needs.run_test.result != 'success' || needs.build.result != 'success'
        env:
          SLACK_MESSAGE: 'Build failed.'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: '#8B0000'
          SLACK_USERNAME: Github Actions # Optional. (defaults to webhook app)
          SLACK_CHANNEL: tech_distelli # Optional. (defaults to webhook)
          SLACK_ICON: https://avatars3.githubusercontent.com/u/9919?s=40&v=4 # Optional. can be (repository, sender, an URL) (defaults to webhook app avatar)
        uses: rtCamp/action-slack-notify@ca2febb266f78a54a245d815081549c522099b76
  workflow_status:
    runs-on: [ self-hosted ]
    name: Update Status Check
    needs: [ build, run_test ]
    if: always()
    steps:
      - name: Failed
        id: failed
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo 'Failing the workflow for github status check.'
          curl -X POST -H "Content-Type: application/json" -H "Authorization: token ${{ github.token }}" \
          -d '{ "state" : "failure" , "context" : "github/combined-status-check" , "description" : "github/combined-status-check", "target_url" : "https://github.com/${{ github.repository }}" }' \
          https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}
          exit 1
      - name: Success
        if: steps.failed.conclusion == 'skipped'
        run: |
          echo 'Status check has passed!'
          curl -X POST -H "Content-Type: application/json" -H "Authorization: token ${{ github.token }}" \
          -d '{ "state" : "success" , "context" : "github/combined-status-check" , "description" : "github/combined-status-check", "target_url" : "https://github.com/${{ github.repository }}" }' \
          https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}
          exit 0
