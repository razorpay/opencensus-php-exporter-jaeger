<?php

namespace Unit\Trace\Hypertrace;

use App\Constants\Tracing as Constant;
use App\Tests\Unit\UnitTestCase;
use App\Trace\Hypertrace\Tracing;
use Illuminate\Support\Facades\Config;

class TraceTest extends UnitTestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @Test
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     * getRoutesToExclude should return routes to exclude.
     * @return void
     */
    public function testGetRoutesToExclude()
    {
        $this->assertEquals([], Tracing::getRoutesToExclude());
    }

    /**
     * @Test
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     * getRoutesToInclude should return routes to include.
     * @return void
     */
    public function testGetRoutesToInclude()
    {
        $this->assertEquals([
            'get_root',
            'get_status',
            'get_auth_code',
            'post_auth_code',
            'delete_auth_code',
            'post_access_token',
            'create_application',
            'get_application',
            'delete_application',
            'update_application',
            'create_application_clients',
            'delete_application_client',
            'get_token',
            'validate_public_token',
            'get_multiple_tokens',
            'delete_token',
            'create_token_partner',
            'create_partner_token',
            'get_admin_entities',
            'post_native_auth_code',
            'create_native_token',
        ], Tracing::getRoutesToInclude());
    }

    /**
     * @Test
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     * getServiceName should return service name with mode.
     * @return void
     */
    public function testGetServiceName()
    {
        Config::shouldReceive('get')
            ->with('jaeger.app_mode', NULL)
            ->andReturn('live');
        Config::partialMock();

        $this->assertEquals(Tracing::getServiceName([]), Constant::SERVICE_NAME_IN_JAEGER . '-' . 'live');
    }

    /**
     * @Test
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     * getBasicSpanAttributes should return service name.
     * @return void
     */
    public function testGetBasicSpanAttributes()
    {
        Config::shouldReceive('get')
            ->with('jaeger.tag_service_version', NULL)
            ->andReturn('live')
            ->shouldReceive('get')
            ->with('jaeger.tag_app_env', NULL)
            ->andReturn('live')
            ->shouldReceive('get')
            ->with('jaeger.app_mode', NULL)
            ->andReturn('live');
        Config::partialMock();

        $this->assertEquals([
            'service.version' => 'live',
            'task_id' => '123',
            'app_env' => 'live',
            'app_mode' => 'live'
        ], Tracing::getBasicSpanAttributes($this->app));
    }

    /**
     * @Test
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     * shouldTraceRoute should trace routes which are included and not excluded.
     * @return void
     */
    public function testShouldTraceRoute()
    {
        $this->assertEquals(true, Tracing::shouldTraceRoute(Tracing::getRoutesToInclude()[0]));
    }

    /**
     * @Test
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     * shouldTraceRoute should not trace routes which are not included.
     * @return void
     */
    public function testShouldNotTraceRouteForNotIncluded()
    {
        $this->assertEquals(false, Tracing::shouldTraceRoute('dummy_route'));
    }

    /**
     * @Test
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     * isEnabled should return if enabled.
     * @return void
     */
    public function testIsEnabled()
    {
        Config::shouldReceive('get')
            ->with('jaeger.enabled', NULL)
            ->andReturn(true);
        Config::partialMock();

        $this->assertEquals(true, Tracing::isEnabled([]));
    }

    /**
     * @Test
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     * isEnabled should return if not enabled.
     * @return void
     */
    public function testIsNotEnabled()
    {
        Config::shouldReceive('get')
            ->with('jaeger.enabled', NULL)
            ->andReturn(false);
        Config::partialMock();

        $this->assertEquals(false, Tracing::isEnabled([]));
    }
}
